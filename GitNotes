
git常用命令总结
　　github和gitlab等等一系列的分布式代码托管服务器方便我们开发人员在小组内开发项目，说起分布式代码托管就给大家提一下另外一代码托管SVN,当然他不是分布式的，而是集中式的代码托管，有兴趣的可以查阅资料了解一下，在这里我将着重给大家介绍github这种代码托管如何使用及常用命令

git安装

　　我用的电脑是windons系统，请根据你们自己的电脑紫铜安装对应的git版本，去Git官网上下载安装即可，在这里将不给大家做详细的说明，安装步骤请自行百度。

ssh -key配置

　　在这一步我已经默认你安装好了Git，打开Git，在Git命令行输入cd  ~/.ssh检查电脑本机是否有ssh key设置，注意: .ssh是隐藏文件，一般在电脑C/用户/Administrator下面就能够找到。

　　一般情况下 ，之前没有用过git的同学电脑本机一般不会 有ssh key 的，下面我讲给大家介绍如何配置ssh key

　　1、进入~路径下，必须保证当前路径在~路径下

　　在git命令行敲击 ssh-keygen -t  rsa -C "xxx.@yyy.zzz" //建议写自己真实有效的邮箱地址。注意：在敲代码是不要将双引号也敲击进去。

　　然后命令行会出现如下代码：

　　Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   //此时我们什么都不需要操作，直接回车就好

　　Enter passphrase (empty for no passphrase):            //此时要你输入码（可以为空，直接回车就好，也可以输入你的密码，这个密码在你最后把本地资源推送到github上面的时候回会让你填写密码，此时密码隐藏，你输入进去是看不到的）

　　Enter same passphrase again: //再次确认密码（如果你第一次有输入密码，这次就再输一次，如果没有直接回车就行了）

　　Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa. //生成的密钥

　　Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. //生成的公钥

　　The key fingerprint is:

　　e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com

　　*本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。其中xxxx_000为你的用户名。

　　2、添加ssh key 到Github上
　　首先登陆Github,点击右上角的“▼”→Settings→SSH kyes→Add SSH key。
　　然后在打开c:/Users/xxxx_000/.ssh里面的id_rsa.pub文件，全选复制公钥内容
　　也可以在git bush中的命令行输入cat ~/.ssh/id_rsa.pub，将得到公钥

　　Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key“

　　3、配置账户

　　$ git config --global user.name “your_username” #设置用户名

　　$ git config --global user.email “your_registered_github_Email” #设置邮箱地址(建议用注册giuhub的邮箱)

　　4、测试ssh keys是否设置成功。

　　ssh -T git@github.com

　　The authenticity of host 'github.com (192.30.252.129)' can't be established.

　　RSA key fingerprint is 16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.

　　Are you sure you want to continue connecting (yes/no)? yes #确认你是否继续联系，输入yes

　　Warning: Permanently added 'github.com,192.30.252.129' (RSA) to the list of known hosts.

　　Enter passphrase for key '/c/Users/xxxx_000/.ssh/id_rsa': #生成ssh kye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。

　　Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. #出现此句话，说明设置成功。

　　到这里，git相关的所有配置已经完成，下面我将给大家介绍最常使用的命令

常用命令

　　1、创建仓库（公开）

　　点击github右上角的+里面的new repository
　　在repository name栏中输入仓库的名称
　　description 栏中可以设置仓库的说明
　　piblic（公开）通用 private（非公开）收费
　　勾选Initialize this repository with a README ，如果想向GitHub添加手中已有的Git仓库，建议不要勾选
　　Add.gitignore 下拉框中选择要使用的框架
　　Add a license选择添加许可协议文件
　　点击create repository按钮，完成仓库的创建

　　2、克隆之前首先要选择克隆文件的位置（cd）
　　clone已有仓库
　　git clone git@github.com:XXX/yyyy.git //XXX为github的用户名，yyy为仓库名
　　3、在对应的文件夹中添加新有项
　　git status
　　4、提交
　　git add mmm.sss //mmm为文件名称，sss为文件拓展名（常用git add .）
　　git commit -m "hhh" //hhh为git commit 提交信息，是对这个提交的概述

　　git log//用于查看提交日志
　　git push //更新GitHub上的仓库

　　5、用git创建仓库

　　mkdir nnn //仓库名

　　cd hhh

　　git init //初始化仓库

　　git status //查看仓库状态

　　touch README.md //创建READEME.md文件

　　git add ERADME.md //添加ERADME.md至暂存区

　　git commit -m "hhh" //如果想要提交信息记录的更详细，请不要加 -m

　　git log --pretty=short //加--pretty=short 只显示提交信息的第一行

　　git log ggg //ggg是指指定的文件或目录，用于查看指定的目录、文件的日志

　　git log -p //查看提交所带来的改动

　　git log -p ggg //查看指定文件的改动

　　git diff //可以查看工作树，暂存区，最新提交之间的差别

　　git diff HEAD //查看工作树与最新提交的差别

　　6、分支操作

　　git branch //显示分支一览表，同时确认当前所在的分支

　　git checkout -b aaa //创建名为aaa的分支，并且切换到aaa分支
　　（git branch aaa //创建名为aaa的分支
　　git checkout aaa // 切换到aaa分支
　　）能和git branch -b aaa 得到同样的效果

　　git checkout - //切换到上一分支

　　7、合并分支

　　git checkout master //切换到master分支

　　git marge --no--ff aaa // 加--no--ff 参数可以在历史记录中明确地记录本次分支的合并

　　git log --graph //以图表形式查看分支

　　8、更改提交的操作

　　git reset //回溯历史版本

　　git reset --hrad //回溯到指定状态，只要提供目标时间点的哈希值

　　9、推进历史

　　git reflog //查看仓库的操作日志，找到要推历史的哈希值

　　git checkout master

　　git reset --hrad ddd //ddd为要推进历史的哈希值

　　10、修改提交信息 git commit --amend

　　压缩历史 git rebase -i 错字漏字等失误称作typo

　　根据以前的步骤在GitHub上创建仓库，应于本地的仓库名相同 GitHub上面创建的仓库的路径为git@github.com: 用户名/仓库名.git

　　git remote add eee git@github.com: 用户名/仓库名.git //添加远程仓库，并将git@github.com: 用户名/仓库名.git远程仓库的名称改为eee

　　git push -u eee master //推送至远程仓库 master分支下 -u 参数可以在推送的同时，将eee仓库的master分支设置为本地仓库的当前分
　　支的的upstream（上游）。添加这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从eee的master
分支中获取内容

　　git checkout -b feature d eee/feature d //获取远程的feature d分支到本地仓库，-b参数后面是本地仓库中新建的仓库的名称

　　git pull eee feature d //将本地的feature d分支更新为最新状态


　　在GitHub上面查看两个分支之间的差别，只需要在地址栏中输入http://github.com/用户名/仓库名/分支1...分支2

　　11、查看master分支在最近七天内的差别
　　http://github.com/用户名/仓库名/master@{7.day.ago}...master （同样，day，week，month，year都是可以哒）

　　12、查看与指定日期之间的差别
　　http://github.com/用户名/仓库名/master@{xxxx-xx-xx}...master （xxxx-xx-xx代表年月日）

　　到这里，git相关的命令已经全部介绍完成，剩下的就靠大家自己学习了。

------------------------------------------
分支与合并
1：创建个分支   git checkout -b xxx
2: 通过vi 修改主分支文件
3： git commit -a -m 'xxxxx'
4:  git checkout master (切换回主分支）
5:  git merge xxx   (进行与主分支的合并，如果主分支在分支的上游，合并其实就是分支指针往后移，如果分支是从更早的地方分叉的，那么会自动进行一个三方合并计算）
6；合并成功后 分支的作用就完成了就可以删除分支了  
	git branch -d xxx



遇到冲突时的分支合并
有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：

$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：

$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：

<<<<<<< HEAD
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
  please contact us at support@github.com
</div>
>>>>>>> iss53
可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：

<div id="footer">
please contact us at email.support@github.com
</div>
这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 <<<<<<<，======= 和 >>>>>>> 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：

$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方"merge tool candidates"里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。

退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。

再运行一次 git status 来确认所有冲突都已解决：

$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   index.html
如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：

Merge branch 'iss53'

Conflicts:
  index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#       .git/MERGE_HEAD
# and try again.
#
如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。
























































